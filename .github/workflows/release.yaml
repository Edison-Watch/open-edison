name: Release (publish based on existing version)

on:
  merge_group:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prerelease:
    name: Mark prerelease (no commit) and publish to PyPI
    runs-on: ubuntu-latest
    environment: pypipublishing
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Open Edison
        uses: ./.github/actions/setup

      - name: Setup Node (for frontend build)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Mark prerelease (rc) without committing
        run: |
          uv run python scripts/version_mark.py prerelease --tag rc --no-commit

      - name: Read version
        id: get_version
        run: |
          VERSION=$(grep -E '^version\s*=\s*"([^"]+)"' pyproject.toml | sed -E 's/.*"([^"]+)".*/\1/')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Publish prerelease to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          make publish_pre_pypi

  verify_prerelease_from_pypi:
    name: Install from PyPI (prerelease) and run smoke/integration tests
    runs-on: ubuntu-latest
    needs: prerelease
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Open Edison
        uses: ./.github/actions/setup

      - name: Install published prerelease from PyPI (retry)
        shell: bash
        run: |
          set -euxo pipefail
          for i in {1..8}; do
            if uv pip install --system --pre "open-edison==${{ needs.prerelease.outputs.version }}"; then
              break
            fi
            echo "Package not yet available on PyPI, retrying in 15s..."; sleep 15
          done
          open-edison --help || (echo "open-edison CLI failed" && exit 1)

      - name: Prepare config
        run: |
          mkdir -p test_config
          cp config.json test_config/
          cp tool_permissions.json test_config/
          cp resource_permissions.json test_config/
          cp prompt_permissions.json test_config/
          touch test_config/.setup_tui_ran

      - name: Start server from installed package
        run: |
          set -euxo pipefail
          open-edison --config-dir test_config &
          echo $! > server.pid
          for i in {1..90}; do
            if curl -sf http://localhost:3001/health >/dev/null; then
              echo "server healthy"; break; fi; sleep 1; done

      - name: Run MCP test client
        run: |
          uv run python scripts/mcp_test_client.py

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then kill $(cat server.pid) || true; fi

  promote_stable:
    name: Strip prerelease (no commit) and publish stable to PyPI
    runs-on: ubuntu-latest
    needs: verify_prerelease_from_pypi
    environment: pypipublishing
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Open Edison
        uses: ./.github/actions/setup

      - name: Setup Node (for frontend build)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Mark release (strip prerelease) without committing
        run: |
          uv run python scripts/version_mark.py release --no-commit

      - name: Read version
        id: get_version
        run: |
          VERSION=$(grep -E '^version\s*=\s*"([^"]+)"' pyproject.toml | sed -E 's/.*"([^"]+)".*/\1/')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Publish stable to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          make publish


